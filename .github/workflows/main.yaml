name: Django CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 수동 실행 가능

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage
    - name: Create test .env file
      run: |
        cat > .env << EOF
        DJANGO_ENV=test
        DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
        DEBUG=True
        ALLOWED_HOSTS=localhost,127.0.0.1
        DATABASE_URL=sqlite:///db.sqlite3
        STATIC_ROOT=/var/www/staticfiles
        STATIC_URL=/static/
        EOF
    - name: Run tests
      run: |
        python manage.py test
    - name: Generate coverage report
      run: |
        coverage run --source='.' manage.py test
        coverage report
        coverage xml
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  docker-deploy:
    needs: test  # test 작업이 성공한 후에만 실행
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'  # main 브랜치 푸시에만 배포
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Setup known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Deploy with Docker
        env:
          PROJECT_PATH: ${{ secrets.PROJECT_PATH }}
          DEFAULT_PATH: "/home/ubuntu/Boo-Game"
        run: |
          ssh ${{ secrets.USERNAME }}@${{ secrets.HOST }} '
            PROJECT_PATH="${PROJECT_PATH:-/home/ubuntu/Boo-Game}"
            cd $PROJECT_PATH
            
            # Git 최신 코드 받기
            git pull origin main
            
            # 환경 파일 생성/업데이트 (민감한 정보는 GitHub Secrets에서)
            cat > .env << EOF
            DJANGO_ENV=production
            DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            DEBUG=False
            ALLOWED_HOSTS=boogame.kr,www.boogame.kr,boogame.kr
            STATIC_ROOT=/var/www/boo_game/static/
            STATIC_URL=/static/
            DATABASE_URL=postgres://admin:boogame12!@db:5432/boogame_db
            EOF
            
            # .env 파일 권한 설정 (보안)
            chmod 600 .env
            
            # Docker 설치 확인 (필요시 설치)
            if ! command -v docker &> /dev/null; then
              echo "Docker not found. Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker ubuntu
              sudo systemctl start docker
              sudo systemctl enable docker
              newgrp docker
            fi
            
            # Docker Compose 설치 확인
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose not found. Installing..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # 백업 디렉토리 생성
            BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
            mkdir -p "$BACKUP_DIR"
            
            # 데이터베이스 백업 (기존 컨테이너가 실행 중인 경우)
            if docker-compose ps | grep -q "boo_game_db"; then
              echo "📂 Creating database backup..."
              docker-compose exec -T db pg_dump -U admin boogame_db > "$BACKUP_DIR/db_backup.sql"
            fi
            
            # 기존 컨테이너 중지 및 제거
            docker-compose down --remove-orphans || true
            
            # 사용하지 않는 이미지 정리
            docker system prune -f || true
            
            # 새 컨테이너 빌드 및 시작
            if ! docker-compose up --build -d; then
              echo "❌ Failed to start containers!"
              if [ -f "$BACKUP_DIR/db_backup.sql" ]; then
                echo "🔄 Restoring database from backup..."
                docker-compose up -d db
                sleep 10
                docker-compose exec -T db psql -U admin boogame_db < "$BACKUP_DIR/db_backup.sql"
              fi
              exit 1
            fi
            
            # 마이그레이션 실행
            echo "📊 Running database migrations..."
            docker-compose exec -T web python manage.py migrate --noinput
            
            # 정적 파일 수집
            echo "📦 Collecting static files..."
            docker-compose exec -T web python manage.py collectstatic --noinput
            
            # 컨테이너 상태 확인
            docker-compose ps
            
            # 로그 확인 (마지막 20줄)
            echo "=== Web Container Logs ==="
            docker-compose logs --tail=20 web
            echo "=== Nginx Container Logs ==="
            docker-compose logs --tail=20 nginx
            
            echo "🐳 Docker deployment completed successfully!"
          '

      - name: Health Check
        run: |
          ssh ${{ secrets.USERNAME }}@${{ secrets.HOST }} '
            # 30초 추가 대기 후 헬스체크
            sleep 30
            
            # HTTPS 응답 확인
            for i in {1..6}; do
              echo "Health check attempt $i of 6..."
              if curl -f -s -k https://boogame.kr/ > /dev/null; then
                echo "✅ HTTPS Health check passed!"
                exit 0
              elif curl -f -s http://localhost/ > /dev/null; then
                echo "✅ HTTP Health check passed!"
                exit 0
              fi
              sleep 10
            done
            
            echo "❌ Health check failed!"
            echo "=== Debug Information ==="
            docker-compose ps
            docker-compose logs --tail=50 web
            docker-compose logs --tail=50 nginx
            exit 1
          '

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "🚀 Docker deployment to ${{ secrets.HOST }} (boogame.kr) completed successfully!"
          else
            echo "❌ Docker deployment to ${{ secrets.HOST }} (boogame.kr) failed!"
          fi
